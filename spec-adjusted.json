{
  "openapi": "3.0.1",
  "info": {
    "title": "CMS API Specification",
    "description": "This is a private API and should only be used by the MCS frontend. All calls will be forwarded to Directus. \nFor authentication, use a Keycloak JWT token.",
    "version": "9.13.0"
  },
  "servers": [
    {
      "url": "https://experience-medical-content-api.dev.services.quin.md/cms/api",
      "description": "CMS proxy"
    }
  ],
  "tags": [
    {
      "name": "Assets",
      "description": "Image typed files can be dynamically resized and transformed to fit any need."
    },
    {
      "name": "Authentication",
      "description": "All events that happen within Directus are tracked and stored in the activities collection. This gives you full accountability over everything that happens."
    },
    {
      "name": "Extensions",
      "description": "Directus can easily be extended through the addition of several types of extensions, including layouts, interfaces, and modules."
    },
    {
      "name": "Server",
      "description": "Access to where Directus runs. Allows you to make sure your server has everything needed to run the platform, and check what kind of latency we're dealing with."
    },
    {
      "name": "Utilities",
      "description": "Directus comes with various utility endpoints you can use to simplify your development flow."
    },
    { "name": "ItemsAnswerOption", "x-collection": "AnswerOption" },
    {
      "name": "ItemsAnswerOptionTranslation",
      "x-collection": "AnswerOptionTranslation"
    },
    { "name": "ItemsArticle", "x-collection": "Article" },
    { "name": "ItemsArticleCategory", "x-collection": "ArticleCategory" },
    { "name": "ItemsArticleTranslation", "x-collection": "ArticleTranslation" },
    { "name": "ItemsCondition", "x-collection": "Condition" },
    { "name": "ItemsConditionFact", "x-collection": "ConditionFact" },
    { "name": "ItemsFact", "x-collection": "Fact" },
    { "name": "ItemsLanguage", "x-collection": "Language" },
    {
      "name": "ItemsMeaning",
      "description": "Defining values for meaning field in Question",
      "x-collection": "Meaning"
    },
    { "name": "ItemsOperator", "x-collection": "Operator" },
    { "name": "ItemsQuestion", "x-collection": "Question" },
    { "name": "ItemsQuestiondisplay", "x-collection": "Questiondisplay" },
    { "name": "ItemsQuestionnaire", "x-collection": "Questionnaire" },
    {
      "name": "ItemsQuestionnaireTranslation",
      "x-collection": "QuestionnaireTranslation"
    },
    {
      "name": "ItemsQuestionTranslation",
      "x-collection": "QuestionTranslation"
    },
    { "name": "ItemsQuestiontype", "x-collection": "Questiontype" },
    { "name": "ItemsSection", "x-collection": "Section" },
    { "name": "ItemsSectionTranslation", "x-collection": "SectionTranslation" },
    { "name": "ItemsVersion", "x-collection": "Version" },
    { "name": "ItemsVersionContentType", "x-collection": "VersionContentType" },
    {
      "name": "Collections",
      "description": "Collections are the individual collections of items, similar to tables in a database. Changes to collections will alter the schema of the database.",
      "x-collection": "directus_collections"
    },
    {
      "name": "Fields",
      "description": "Fields are individual pieces of content within an item. They are mapped to columns in the database.",
      "x-collection": "directus_fields"
    },
    {
      "name": "Files",
      "description": "Files can be saved in any given location. Directus has a powerful assets endpoint that can be used to generate thumbnails for images on the fly.",
      "x-collection": "directus_files"
    },
    {
      "name": "Folders",
      "description": "Group files by virtual folders.",
      "x-collection": "directus_folders"
    },
    {
      "name": "Relations",
      "description": "What data is linked to what other data. Allows you to assign authors to articles, products to sales, and whatever other structures you can think of.",
      "x-collection": "directus_relations"
    },
    {
      "name": "Roles",
      "description": "Roles are groups of users that share permissions.",
      "x-collection": "directus_roles"
    },
    {
      "name": "Users",
      "description": "Users are what gives you access to the data.",
      "x-collection": "directus_users"
    }
  ],
  "paths": {
    "/assets/{id}": {
      "get": {
        "tags": ["Assets"],
        "operationId": "getAsset",
        "summary": "Get an Asset",
        "description": "Image typed files can be dynamically resized and transformed to fit any need.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "key",
            "in": "query",
            "description": "The key of the asset size configured in settings.",
            "schema": { "type": "string" }
          },
          {
            "name": "transforms",
            "in": "query",
            "description": "A JSON array of image transformations",
            "schema": { "type": "string" }
          },
          {
            "name": "download",
            "in": "query",
            "description": "Download the asset to your computer",
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": { "text/plain": { "schema": { "type": "string" } } }
          },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      }
    },
    "/auth/login": {
      "post": {
        "summary": "Retrieve a Temporary Access Token",
        "description": "Retrieve a Temporary Access Token",
        "tags": ["Authentication"],
        "operationId": "login",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["email", "password"],
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "admin@example.com",
                    "description": "Email address of the user you're retrieving the access token for."
                  },
                  "password": {
                    "type": "string",
                    "description": "Password of the user.",
                    "format": "password",
                    "example": "password"
                  },
                  "mode": {
                    "type": "string",
                    "enum": ["json", "cookie"],
                    "default": "json",
                    "description": "Choose between retrieving the token as a string, or setting it as a cookie."
                  },
                  "otp": {
                    "type": "string",
                    "description": "If 2FA is enabled, you need to pass the one time password."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful authentification",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "access_token": {
                          "type": "string",
                          "example": "eyJhbGciOiJI..."
                        },
                        "expires": { "type": "integer", "example": 900 },
                        "refresh_token": {
                          "type": "string",
                          "example": "yuOJkjdPXMd..."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "summary": "Refresh Token",
        "description": "Refresh a Temporary Access Token.",
        "tags": ["Authentication"],
        "operationId": "refresh",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["token"],
                "properties": {
                  "refresh_token": {
                    "type": "string",
                    "example": "eyJ0eXAiOiJKV...",
                    "description": "JWT access token you want to refresh. This token can't be expired."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "access_token": {
                          "type": "string",
                          "example": "eyJhbGciOiJI..."
                        },
                        "expires": { "type": "integer", "example": 900 },
                        "refresh_token": {
                          "type": "string",
                          "example": "Gy-caJMpmGTA..."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "summary": "Log Out",
        "description": "Log Out",
        "tags": ["Authentication"],
        "operationId": "logout",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["token"],
                "properties": {
                  "refresh_token": {
                    "type": "string",
                    "example": "eyJ0eXAiOiJKV...",
                    "description": "JWT access token you want to logout."
                  }
                }
              }
            }
          }
        },
        "responses": { "200": { "description": "Request successful" } }
      }
    },
    "/auth/password/request": {
      "post": {
        "tags": ["Authentication"],
        "operationId": "passwordRequest",
        "summary": "Request a Password Reset",
        "description": "Request a reset password email to be send.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["email"],
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "admin@example.com",
                    "description": "Email address of the user you're requesting a reset for."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      }
    },
    "/auth/password/reset": {
      "post": {
        "tags": ["Authentication"],
        "operationId": "passwordReset",
        "summary": "Reset a Password",
        "description": "The request a password reset endpoint sends an email with a link to the admin app which in turn uses this endpoint to allow the user to reset their password.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["token", "password"],
                "properties": {
                  "token": {
                    "type": "string",
                    "example": "eyJ0eXAiOiJKV1Qi...",
                    "description": "One-time use JWT token that is used to verify the user."
                  },
                  "password": {
                    "type": "string",
                    "example": "password",
                    "format": "password",
                    "description": "New password for the user."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      }
    },
    "/auth/oauth": {
      "get": {
        "tags": ["Authentication"],
        "operationId": "oauth",
        "summary": "List OAuth Providers",
        "description": "List configured OAuth providers.",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "public": { "type": "boolean" },
                    "data": {
                      "type": "array",
                      "example": ["github", "facebook"],
                      "items": { "type": "string" }
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      }
    },
    "/auth/oauth/{provider}": {
      "get": {
        "summary": "Authenticated using an OAuth provider",
        "description": "Start OAuth flow using the specified provider",
        "tags": ["Authentication"],
        "operationId": "oauthProvider",
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "description": "Key of the activated OAuth provider.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "redirect",
            "in": "query",
            "required": false,
            "description": "Where to redirect on successful login. If set the authentication details are set inside cookies otherwise a JSON is returned.",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "public": { "type": "boolean" },
                    "data": {
                      "type": "object",
                      "properties": { "token": { "type": "string" } }
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      }
    },
    "/extensions/interfaces": {
      "get": {
        "summary": "List Interfaces",
        "description": "List all installed custom interfaces.",
        "operationId": "getInterfaces",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": { "type": "array", "items": { "type": "object" } }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        },
        "tags": ["Extensions"]
      }
    },
    "/extensions/layouts": {
      "get": {
        "summary": "List Layouts",
        "description": "List all installed custom layouts.",
        "operationId": "getLayouts",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": { "type": "array", "items": { "type": "object" } }
                  }
                }
              }
            },
            "description": "Successful request"
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        },
        "tags": ["Extensions"]
      }
    },
    "/extensions/displays": {
      "get": {
        "summary": "List Displays",
        "description": "List all installed custom displays.",
        "operationId": "getDisplays",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": { "type": "array", "items": { "type": "object" } }
                  }
                }
              }
            },
            "description": "Successful request"
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        },
        "tags": ["Extensions"]
      }
    },
    "/extensions/modules": {
      "get": {
        "summary": "List Modules",
        "description": "List all installed custom modules.",
        "operationId": "getModules",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": { "type": "array", "items": { "type": "object" } }
                  }
                }
              }
            },
            "description": "Successful request"
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        },
        "tags": ["Extensions"]
      }
    },
    "/server/info": {
      "get": {
        "summary": "System Info",
        "description": "Perform a system status check and return the options.",
        "operationId": "serverInfo",
        "parameters": [
          {
            "description": "The first time you create a project, the provided token will be saved and required for subsequent project installs. It can also be found and configured in `/config/__api.json` on your server.",
            "in": "query",
            "name": "super_admin_token",
            "required": true,
            "schema": { "type": "integer" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": { "data": { "type": "object" } },
                  "type": "object"
                }
              }
            },
            "description": "Successful request"
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        },
        "tags": ["Server"]
      }
    },
    "/server/ping": {
      "get": {
        "summary": "Ping",
        "description": "Ping, pong. Ping.. pong.",
        "operationId": "ping",
        "responses": {
          "200": {
            "content": {
              "application/text": {
                "schema": {
                  "type": "string",
                  "pattern": "pong",
                  "example": "pong"
                }
              }
            },
            "description": "Successful request"
          }
        },
        "tags": ["Server"]
      }
    },
    "/utils/hash/generate": {
      "post": {
        "summary": "Hash a string",
        "description": "Generate a hash for a given string.",
        "operationId": "hash-generate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "string": {
                    "description": "String to hash.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "string",
                      "example": "$argon2i$v=19$m=4096,t=3,p=1$pOyIa/zmRAjCVLb2f7kOyg$DasoO6LzMM+6iKfzCDq6JbsYsZWLSm33p7i9NxL9mDc"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successful request"
          }
        },
        "tags": ["Utilities"]
      }
    },
    "/utils/hash/verify": {
      "post": {
        "summary": "Hash a string",
        "description": "Generate a hash for a given string.",
        "operationId": "hash-verify",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "string": {
                    "description": "String to hash.",
                    "type": "string"
                  },
                  "hash": {
                    "description": "Hash you want to verify against.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": { "type": "boolean", "example": true }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successful request"
          }
        },
        "tags": ["Utilities"]
      }
    },
    "/utils/sort/{collection}": {
      "post": {
        "summary": "Sort Items",
        "description": "Re-sort items in collection based on start and to value of item",
        "operationId": "sort",
        "parameters": [
          {
            "description": "Collection identifier",
            "in": "path",
            "name": "collection",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "item": {
                    "description": "Primary key of item to move",
                    "type": "number"
                  },
                  "to": {
                    "description": "Primary key of item where to move the current item to",
                    "type": "number"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": { "200": { "description": "Successful request" } },
        "tags": ["Utilities"]
      }
    },
    "/utils/import/{collection}": {
      "post": {
        "summary": "Import Items",
        "description": "Import multiple records from a JSON or CSV file into a collection.",
        "operationId": "import",
        "parameters": [
          {
            "description": "Collection identifier",
            "in": "path",
            "name": "collection",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": { "type": "string", "format": "binary" }
                }
              }
            }
          }
        },
        "responses": { "200": { "description": "Successful request" } },
        "tags": ["Utilities"]
      }
    },
    "/utils/export/{collection}": {
      "post": {
        "summary": "Export Items",
        "description": "Export a larger data set to a file in the File Library",
        "operationId": "export",
        "parameters": [
          {
            "description": "Collection identifier",
            "in": "path",
            "name": "collection",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "format": {
                    "description": "What file format to save the export to. One of csv, xml, json",
                    "type": "string",
                    "enum": ["csv", "xml", "json"]
                  },
                  "query": {
                    "description": "The query object to use for the export",
                    "required": true,
                    "$ref": "#/components/schemas/Query"
                  },
                  "file": {
                    "$ref": "#/components/schemas/Files"
                  }
                }
              }
            }
          }
        },
        "responses": { "200": { "description": "Successful request" } },
        "tags": ["Utilities"]
      }
    },
    "/utils/cache/clear": {
      "post": {
        "summary": "Clear Cache",
        "description": "Resets both the data and schema cache of Directus.",
        "operationId": "clear-cache",
        "responses": { "200": { "description": "Successful request" } },
        "tags": ["Utilities"]
      }
    },
    "/utils/random/string": {
      "get": {
        "summary": "Get a Random String",
        "description": "Returns a random string of given length.",
        "operationId": "random",
        "parameters": [
          {
            "description": "Length of the random string.",
            "in": "query",
            "name": "length",
            "required": false,
            "schema": { "type": "integer" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": { "type": "string", "example": "1>M3+4oh.S" }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successful request"
          }
        },
        "tags": ["Utilities"]
      }
    },
    "/items/AnswerOption": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new AnswerOption item.",
        "tags": ["Items", "ItemsAnswerOption"],
        "operationId": "createItemsAnswerOption",
        "parameters": [{ "$ref": "#/components/parameters/Meta" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsAnswerOption"
                    }
                  },
                  { "$ref": "#/components/schemas/ItemsAnswerOption" }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsAnswerOption"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the AnswerOption items.",
        "tags": ["Items", "ItemsAnswerOption"],
        "operationId": "readItemsAnswerOption",
        "security": [{ "Auth": [] }],
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Limit" },
          { "$ref": "#/components/parameters/Meta" },
          { "$ref": "#/components/parameters/Offset" },
          { "$ref": "#/components/parameters/Sort" },
          { "$ref": "#/components/parameters/Filter" },
          { "$ref": "#/components/parameters/Search" }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsAnswerOption"
                      }
                    },
                    "meta": { "$ref": "#/components/schemas/x-metadata" }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      }
    },
    "/items/AnswerOption/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single AnswerOption item by unique identifier.",
        "tags": ["Items", "ItemsAnswerOption"],
        "operationId": "readSingleItemsAnswerOption",
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Meta" },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ItemsAnswerOption"
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing AnswerOption item.",
        "tags": ["Items", "ItemsAnswerOption"],
        "operationId": "updateSingleItemsAnswerOption",
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Meta" },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemsAnswerOption"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ItemsAnswerOption"
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing AnswerOption item.",
        "tags": ["Items", "ItemsAnswerOption"],
        "operationId": "deleteSingleItemsAnswerOption",
        "responses": {
          "200": { "description": "Successful request" },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/AnswerOptionTranslation": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new AnswerOptionTranslation item.",
        "tags": ["Items", "ItemsAnswerOptionTranslation"],
        "operationId": "createItemsAnswerOptionTranslation",
        "parameters": [{ "$ref": "#/components/parameters/Meta" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsAnswerOptionTranslation"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsAnswerOptionTranslation"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsAnswerOptionTranslation"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the AnswerOptionTranslation items.",
        "tags": ["Items", "ItemsAnswerOptionTranslation"],
        "operationId": "readItemsAnswerOptionTranslation",
        "security": [{ "Auth": [] }],
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Limit" },
          { "$ref": "#/components/parameters/Meta" },
          { "$ref": "#/components/parameters/Offset" },
          { "$ref": "#/components/parameters/Sort" },
          { "$ref": "#/components/parameters/Filter" },
          { "$ref": "#/components/parameters/Search" }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsAnswerOptionTranslation"
                      }
                    },
                    "meta": { "$ref": "#/components/schemas/x-metadata" }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      }
    },
    "/items/AnswerOptionTranslation/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single AnswerOptionTranslation item by unique identifier.",
        "tags": ["Items", "ItemsAnswerOptionTranslation"],
        "operationId": "readSingleItemsAnswerOptionTranslation",
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Meta" },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ItemsAnswerOptionTranslation"
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing AnswerOptionTranslation item.",
        "tags": ["Items", "ItemsAnswerOptionTranslation"],
        "operationId": "updateSingleItemsAnswerOptionTranslation",
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Meta" },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemsAnswerOptionTranslation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ItemsAnswerOptionTranslation"
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing AnswerOptionTranslation item.",
        "tags": ["Items", "ItemsAnswerOptionTranslation"],
        "operationId": "deleteSingleItemsAnswerOptionTranslation",
        "responses": {
          "200": { "description": "Successful request" },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/Article": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new Article item.",
        "tags": ["Items", "ItemsArticle"],
        "operationId": "createItemsArticle",
        "parameters": [{ "$ref": "#/components/parameters/Meta" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "oneOf": [
                  {
                    "type": "array",
                    "items": { "$ref": "#/components/schemas/ItemsArticle" }
                  },
                  { "$ref": "#/components/schemas/ItemsArticle" }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": { "$ref": "#/components/schemas/ItemsArticle" }
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the Article items.",
        "tags": ["Items", "ItemsArticle"],
        "operationId": "readItemsArticle",
        "security": [{ "Auth": [] }],
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Limit" },
          { "$ref": "#/components/parameters/Meta" },
          { "$ref": "#/components/parameters/Offset" },
          { "$ref": "#/components/parameters/Sort" },
          { "$ref": "#/components/parameters/Filter" },
          { "$ref": "#/components/parameters/Search" }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsArticle"
                      }
                    },
                    "meta": { "$ref": "#/components/schemas/x-metadata" }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      }
    },
    "/items/Article/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single Article item by unique identifier.",
        "tags": ["Items", "ItemsArticle"],
        "operationId": "readSingleItemsArticle",
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Meta" },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ItemsArticle"
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing Article item.",
        "tags": ["Items", "ItemsArticle"],
        "operationId": "updateSingleItemsArticle",
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Meta" },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemsArticle"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ItemsArticle"
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing Article item.",
        "tags": ["Items", "ItemsArticle"],
        "operationId": "deleteSingleItemsArticle",
        "responses": {
          "200": { "description": "Successful request" },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/ArticleCategory": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new ArticleCategory item.",
        "tags": ["Items", "ItemsArticleCategory"],
        "operationId": "createItemsArticleCategory",
        "parameters": [{ "$ref": "#/components/parameters/Meta" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsArticleCategory"
                    }
                  },
                  { "$ref": "#/components/schemas/ItemsArticleCategory" }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsArticleCategory"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the ArticleCategory items.",
        "tags": ["Items", "ItemsArticleCategory"],
        "operationId": "readItemsArticleCategory",
        "security": [{ "Auth": [] }],
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Limit" },
          { "$ref": "#/components/parameters/Meta" },
          { "$ref": "#/components/parameters/Offset" },
          { "$ref": "#/components/parameters/Sort" },
          { "$ref": "#/components/parameters/Filter" },
          { "$ref": "#/components/parameters/Search" }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsArticleCategory"
                      }
                    },
                    "meta": { "$ref": "#/components/schemas/x-metadata" }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      }
    },
    "/items/ArticleCategory/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single ArticleCategory item by unique identifier.",
        "tags": ["Items", "ItemsArticleCategory"],
        "operationId": "readSingleItemsArticleCategory",
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Meta" },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ItemsArticleCategory"
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing ArticleCategory item.",
        "tags": ["Items", "ItemsArticleCategory"],
        "operationId": "updateSingleItemsArticleCategory",
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Meta" },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemsArticleCategory"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ItemsArticleCategory"
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing ArticleCategory item.",
        "tags": ["Items", "ItemsArticleCategory"],
        "operationId": "deleteSingleItemsArticleCategory",
        "responses": {
          "200": { "description": "Successful request" },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/ArticleTranslation": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new ArticleTranslation item.",
        "tags": ["Items", "ItemsArticleTranslation"],
        "operationId": "createItemsArticleTranslation",
        "parameters": [{ "$ref": "#/components/parameters/Meta" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsArticleTranslation"
                    }
                  },
                  { "$ref": "#/components/schemas/ItemsArticleTranslation" }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsArticleTranslation"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the ArticleTranslation items.",
        "tags": ["Items", "ItemsArticleTranslation"],
        "operationId": "readItemsArticleTranslation",
        "security": [{ "Auth": [] }],
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Limit" },
          { "$ref": "#/components/parameters/Meta" },
          { "$ref": "#/components/parameters/Offset" },
          { "$ref": "#/components/parameters/Sort" },
          { "$ref": "#/components/parameters/Filter" },
          { "$ref": "#/components/parameters/Search" }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsArticleTranslation"
                      }
                    },
                    "meta": { "$ref": "#/components/schemas/x-metadata" }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      }
    },
    "/items/ArticleTranslation/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single ArticleTranslation item by unique identifier.",
        "tags": ["Items", "ItemsArticleTranslation"],
        "operationId": "readSingleItemsArticleTranslation",
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Meta" },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ItemsArticleTranslation"
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing ArticleTranslation item.",
        "tags": ["Items", "ItemsArticleTranslation"],
        "operationId": "updateSingleItemsArticleTranslation",
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Meta" },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemsArticleTranslation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ItemsArticleTranslation"
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing ArticleTranslation item.",
        "tags": ["Items", "ItemsArticleTranslation"],
        "operationId": "deleteSingleItemsArticleTranslation",
        "responses": {
          "200": { "description": "Successful request" },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/Condition": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new Condition item.",
        "tags": ["Items", "ItemsCondition"],
        "operationId": "createItemsCondition",
        "parameters": [{ "$ref": "#/components/parameters/Meta" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "oneOf": [
                  {
                    "type": "array",
                    "items": { "$ref": "#/components/schemas/ItemsCondition" }
                  },
                  { "$ref": "#/components/schemas/ItemsCondition" }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": { "$ref": "#/components/schemas/ItemsCondition" }
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the Condition items.",
        "tags": ["Items", "ItemsCondition"],
        "operationId": "readItemsCondition",
        "security": [{ "Auth": [] }],
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Limit" },
          { "$ref": "#/components/parameters/Meta" },
          { "$ref": "#/components/parameters/Offset" },
          { "$ref": "#/components/parameters/Sort" },
          { "$ref": "#/components/parameters/Filter" },
          { "$ref": "#/components/parameters/Search" }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsCondition"
                      }
                    },
                    "meta": { "$ref": "#/components/schemas/x-metadata" }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      }
    },
    "/items/Condition/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single Condition item by unique identifier.",
        "tags": ["Items", "ItemsCondition"],
        "operationId": "readSingleItemsCondition",
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Meta" },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ItemsCondition"
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing Condition item.",
        "tags": ["Items", "ItemsCondition"],
        "operationId": "updateSingleItemsCondition",
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Meta" },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemsCondition"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ItemsCondition"
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing Condition item.",
        "tags": ["Items", "ItemsCondition"],
        "operationId": "deleteSingleItemsCondition",
        "responses": {
          "200": { "description": "Successful request" },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/ConditionFact": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new ConditionFact item.",
        "tags": ["Items", "ItemsConditionFact"],
        "operationId": "createItemsConditionFact",
        "parameters": [{ "$ref": "#/components/parameters/Meta" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsConditionFact"
                    }
                  },
                  { "$ref": "#/components/schemas/ItemsConditionFact" }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsConditionFact"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the ConditionFact items.",
        "tags": ["Items", "ItemsConditionFact"],
        "operationId": "readItemsConditionFact",
        "security": [{ "Auth": [] }],
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Limit" },
          { "$ref": "#/components/parameters/Meta" },
          { "$ref": "#/components/parameters/Offset" },
          { "$ref": "#/components/parameters/Sort" },
          { "$ref": "#/components/parameters/Filter" },
          { "$ref": "#/components/parameters/Search" }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsConditionFact"
                      }
                    },
                    "meta": { "$ref": "#/components/schemas/x-metadata" }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      }
    },
    "/items/ConditionFact/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single ConditionFact item by unique identifier.",
        "tags": ["Items", "ItemsConditionFact"],
        "operationId": "readSingleItemsConditionFact",
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Meta" },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ItemsConditionFact"
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing ConditionFact item.",
        "tags": ["Items", "ItemsConditionFact"],
        "operationId": "updateSingleItemsConditionFact",
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Meta" },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemsConditionFact"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ItemsConditionFact"
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing ConditionFact item.",
        "tags": ["Items", "ItemsConditionFact"],
        "operationId": "deleteSingleItemsConditionFact",
        "responses": {
          "200": { "description": "Successful request" },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/Fact": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new Fact item.",
        "tags": ["Items", "ItemsFact"],
        "operationId": "createItemsFact",
        "parameters": [{ "$ref": "#/components/parameters/Meta" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "oneOf": [
                  {
                    "type": "array",
                    "items": { "$ref": "#/components/schemas/ItemsFact" }
                  },
                  { "$ref": "#/components/schemas/ItemsFact" }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": { "$ref": "#/components/schemas/ItemsFact" }
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the Fact items.",
        "tags": ["Items", "ItemsFact"],
        "operationId": "readItemsFact",
        "security": [{ "Auth": [] }],
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Limit" },
          { "$ref": "#/components/parameters/Meta" },
          { "$ref": "#/components/parameters/Offset" },
          { "$ref": "#/components/parameters/Sort" },
          { "$ref": "#/components/parameters/Filter" },
          { "$ref": "#/components/parameters/Search" }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsFact"
                      }
                    },
                    "meta": { "$ref": "#/components/schemas/x-metadata" }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      }
    },
    "/items/Fact/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single Fact item by unique identifier.",
        "tags": ["Items", "ItemsFact"],
        "operationId": "readSingleItemsFact",
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Meta" },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ItemsFact"
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing Fact item.",
        "tags": ["Items", "ItemsFact"],
        "operationId": "updateSingleItemsFact",
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Meta" },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemsFact"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ItemsFact"
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing Fact item.",
        "tags": ["Items", "ItemsFact"],
        "operationId": "deleteSingleItemsFact",
        "responses": {
          "200": { "description": "Successful request" },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/Language": {
      "get": {
        "summary": "List Items",
        "description": "List the Language items.",
        "tags": ["Items", "ItemsLanguage"],
        "operationId": "readItemsLanguage",
        "security": [{ "Auth": [] }],
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Limit" },
          { "$ref": "#/components/parameters/Meta" },
          { "$ref": "#/components/parameters/Offset" },
          { "$ref": "#/components/parameters/Sort" },
          { "$ref": "#/components/parameters/Filter" },
          { "$ref": "#/components/parameters/Search" }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsLanguage"
                      }
                    },
                    "meta": { "$ref": "#/components/schemas/x-metadata" }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      }
    },
    "/items/Language/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single Language item by unique identifier.",
        "tags": ["Items", "ItemsLanguage"],
        "operationId": "readSingleItemsLanguage",
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Meta" },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ItemsLanguage"
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      }
    },
    "/items/Meaning": {
      "get": {
        "summary": "List Items",
        "description": "List the Meaning items.",
        "tags": ["Items", "ItemsMeaning"],
        "operationId": "readItemsMeaning",
        "security": [{ "Auth": [] }],
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Limit" },
          { "$ref": "#/components/parameters/Meta" },
          { "$ref": "#/components/parameters/Offset" },
          { "$ref": "#/components/parameters/Sort" },
          { "$ref": "#/components/parameters/Filter" },
          { "$ref": "#/components/parameters/Search" }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsMeaning"
                      }
                    },
                    "meta": { "$ref": "#/components/schemas/x-metadata" }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      }
    },
    "/items/Meaning/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single Meaning item by unique identifier.",
        "tags": ["Items", "ItemsMeaning"],
        "operationId": "readSingleItemsMeaning",
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Meta" },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ItemsMeaning"
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      }
    },
    "/items/Operator": {
      "get": {
        "summary": "List Items",
        "description": "List the Operator items.",
        "tags": ["Items", "ItemsOperator"],
        "operationId": "readItemsOperator",
        "security": [{ "Auth": [] }],
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Limit" },
          { "$ref": "#/components/parameters/Meta" },
          { "$ref": "#/components/parameters/Offset" },
          { "$ref": "#/components/parameters/Sort" },
          { "$ref": "#/components/parameters/Filter" },
          { "$ref": "#/components/parameters/Search" }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsOperator"
                      }
                    },
                    "meta": { "$ref": "#/components/schemas/x-metadata" }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      }
    },
    "/items/Operator/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single Operator item by unique identifier.",
        "tags": ["Items", "ItemsOperator"],
        "operationId": "readSingleItemsOperator",
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Meta" },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ItemsOperator"
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      }
    },
    "/items/Question": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new Question item.",
        "tags": ["Items", "ItemsQuestion"],
        "operationId": "createItemsQuestion",
        "parameters": [{ "$ref": "#/components/parameters/Meta" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "oneOf": [
                  {
                    "type": "array",
                    "items": { "$ref": "#/components/schemas/ItemsQuestion" }
                  },
                  { "$ref": "#/components/schemas/ItemsQuestion" }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": { "$ref": "#/components/schemas/ItemsQuestion" }
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the Question items.",
        "tags": ["Items", "ItemsQuestion"],
        "operationId": "readItemsQuestion",
        "security": [{ "Auth": [] }],
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Limit" },
          { "$ref": "#/components/parameters/Meta" },
          { "$ref": "#/components/parameters/Offset" },
          { "$ref": "#/components/parameters/Sort" },
          { "$ref": "#/components/parameters/Filter" },
          { "$ref": "#/components/parameters/Search" }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsQuestion"
                      }
                    },
                    "meta": { "$ref": "#/components/schemas/x-metadata" }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      }
    },
    "/items/Question/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single Question item by unique identifier.",
        "tags": ["Items", "ItemsQuestion"],
        "operationId": "readSingleItemsQuestion",
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Meta" },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ItemsQuestion"
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing Question item.",
        "tags": ["Items", "ItemsQuestion"],
        "operationId": "updateSingleItemsQuestion",
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Meta" },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemsQuestion"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ItemsQuestion"
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing Question item.",
        "tags": ["Items", "ItemsQuestion"],
        "operationId": "deleteSingleItemsQuestion",
        "responses": {
          "200": { "description": "Successful request" },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/QuestionDisplay": {
      "get": {
        "summary": "List Items",
        "description": "List the QuestionDisplay items.",
        "tags": ["Items", "ItemsQuestiondisplay"],
        "operationId": "readItemsQuestiondisplay",
        "security": [{ "Auth": [] }],
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Limit" },
          { "$ref": "#/components/parameters/Meta" },
          { "$ref": "#/components/parameters/Offset" },
          { "$ref": "#/components/parameters/Sort" },
          { "$ref": "#/components/parameters/Filter" },
          { "$ref": "#/components/parameters/Search" }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsQuestiondisplay"
                      }
                    },
                    "meta": { "$ref": "#/components/schemas/x-metadata" }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      }
    },
    "/items/QuestionDisplay/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single QuestionDisplay item by unique identifier.",
        "tags": ["Items", "ItemsQuestiondisplay"],
        "operationId": "readSingleItemsQuestiondisplay",
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Meta" },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ItemsQuestiondisplay"
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      }
    },
    "/items/Questionnaire": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new Questionnaire item.",
        "tags": ["Items", "ItemsQuestionnaire"],
        "operationId": "createItemsQuestionnaire",
        "parameters": [{ "$ref": "#/components/parameters/Meta" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsQuestionnaire"
                    }
                  },
                  { "$ref": "#/components/schemas/ItemsQuestionnaire" }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsQuestionnaire"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the Questionnaire items.",
        "tags": ["Items", "ItemsQuestionnaire"],
        "operationId": "readItemsQuestionnaire",
        "security": [{ "Auth": [] }],
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Limit" },
          { "$ref": "#/components/parameters/Meta" },
          { "$ref": "#/components/parameters/Offset" },
          { "$ref": "#/components/parameters/Sort" },
          { "$ref": "#/components/parameters/Filter" },
          { "$ref": "#/components/parameters/Search" }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsQuestionnaire"
                      }
                    },
                    "meta": { "$ref": "#/components/schemas/x-metadata" }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      }
    },
    "/items/Questionnaire/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single Questionnaire item by unique identifier.",
        "tags": ["Items", "ItemsQuestionnaire"],
        "operationId": "readSingleItemsQuestionnaire",
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Meta" },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ItemsQuestionnaire"
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing Questionnaire item.",
        "tags": ["Items", "ItemsQuestionnaire"],
        "operationId": "updateSingleItemsQuestionnaire",
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Meta" },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemsQuestionnaire"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ItemsQuestionnaire"
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing Questionnaire item.",
        "tags": ["Items", "ItemsQuestionnaire"],
        "operationId": "deleteSingleItemsQuestionnaire",
        "responses": {
          "200": { "description": "Successful request" },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/QuestionnaireTranslation": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new QuestionnaireTranslation item.",
        "tags": ["Items", "ItemsQuestionnaireTranslation"],
        "operationId": "createItemsQuestionnaireTranslation",
        "parameters": [{ "$ref": "#/components/parameters/Meta" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsQuestionnaireTranslation"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsQuestionnaireTranslation"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsQuestionnaireTranslation"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the QuestionnaireTranslation items.",
        "tags": ["Items", "ItemsQuestionnaireTranslation"],
        "operationId": "readItemsQuestionnaireTranslation",
        "security": [{ "Auth": [] }],
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Limit" },
          { "$ref": "#/components/parameters/Meta" },
          { "$ref": "#/components/parameters/Offset" },
          { "$ref": "#/components/parameters/Sort" },
          { "$ref": "#/components/parameters/Filter" },
          { "$ref": "#/components/parameters/Search" }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsQuestionnaireTranslation"
                      }
                    },
                    "meta": { "$ref": "#/components/schemas/x-metadata" }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      }
    },
    "/items/QuestionnaireTranslation/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single QuestionnaireTranslation item by unique identifier.",
        "tags": ["Items", "ItemsQuestionnaireTranslation"],
        "operationId": "readSingleItemsQuestionnaireTranslation",
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Meta" },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ItemsQuestionnaireTranslation"
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing QuestionnaireTranslation item.",
        "tags": ["Items", "ItemsQuestionnaireTranslation"],
        "operationId": "updateSingleItemsQuestionnaireTranslation",
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Meta" },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemsQuestionnaireTranslation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ItemsQuestionnaireTranslation"
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing QuestionnaireTranslation item.",
        "tags": ["Items", "ItemsQuestionnaireTranslation"],
        "operationId": "deleteSingleItemsQuestionnaireTranslation",
        "responses": {
          "200": { "description": "Successful request" },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/QuestionTranslation": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new QuestionTranslation item.",
        "tags": ["Items", "ItemsQuestionTranslation"],
        "operationId": "createItemsQuestionTranslation",
        "parameters": [{ "$ref": "#/components/parameters/Meta" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsQuestionTranslation"
                    }
                  },
                  { "$ref": "#/components/schemas/ItemsQuestionTranslation" }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsQuestionTranslation"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the QuestionTranslation items.",
        "tags": ["Items", "ItemsQuestionTranslation"],
        "operationId": "readItemsQuestionTranslation",
        "security": [{ "Auth": [] }],
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Limit" },
          { "$ref": "#/components/parameters/Meta" },
          { "$ref": "#/components/parameters/Offset" },
          { "$ref": "#/components/parameters/Sort" },
          { "$ref": "#/components/parameters/Filter" },
          { "$ref": "#/components/parameters/Search" }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsQuestionTranslation"
                      }
                    },
                    "meta": { "$ref": "#/components/schemas/x-metadata" }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      }
    },
    "/items/QuestionTranslation/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single QuestionTranslation item by unique identifier.",
        "tags": ["Items", "ItemsQuestionTranslation"],
        "operationId": "readSingleItemsQuestionTranslation",
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Meta" },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ItemsQuestionTranslation"
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing QuestionTranslation item.",
        "tags": ["Items", "ItemsQuestionTranslation"],
        "operationId": "updateSingleItemsQuestionTranslation",
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Meta" },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemsQuestionTranslation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ItemsQuestionTranslation"
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing QuestionTranslation item.",
        "tags": ["Items", "ItemsQuestionTranslation"],
        "operationId": "deleteSingleItemsQuestionTranslation",
        "responses": {
          "200": { "description": "Successful request" },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/QuestionType": {
      "get": {
        "summary": "List Items",
        "description": "List the QuestionType items.",
        "tags": ["Items", "ItemsQuestiontype"],
        "operationId": "readItemsQuestiontype",
        "security": [{ "Auth": [] }],
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Limit" },
          { "$ref": "#/components/parameters/Meta" },
          { "$ref": "#/components/parameters/Offset" },
          { "$ref": "#/components/parameters/Sort" },
          { "$ref": "#/components/parameters/Filter" },
          { "$ref": "#/components/parameters/Search" }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsQuestiontype"
                      }
                    },
                    "meta": { "$ref": "#/components/schemas/x-metadata" }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      }
    },
    "/items/QuestionType/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single QuestionType item by unique identifier.",
        "tags": ["Items", "ItemsQuestiontype"],
        "operationId": "readSingleItemsQuestiontype",
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Meta" },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ItemsQuestiontype"
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      }
    },
    "/items/Section": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new Section item.",
        "tags": ["Items", "ItemsSection"],
        "operationId": "createItemsSection",
        "parameters": [{ "$ref": "#/components/parameters/Meta" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "oneOf": [
                  {
                    "type": "array",
                    "items": { "$ref": "#/components/schemas/ItemsSection" }
                  },
                  { "$ref": "#/components/schemas/ItemsSection" }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": { "$ref": "#/components/schemas/ItemsSection" }
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the Section items.",
        "tags": ["Items", "ItemsSection"],
        "operationId": "readItemsSection",
        "security": [{ "Auth": [] }],
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Limit" },
          { "$ref": "#/components/parameters/Meta" },
          { "$ref": "#/components/parameters/Offset" },
          { "$ref": "#/components/parameters/Sort" },
          { "$ref": "#/components/parameters/Filter" },
          { "$ref": "#/components/parameters/Search" }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsSection"
                      }
                    },
                    "meta": { "$ref": "#/components/schemas/x-metadata" }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      }
    },
    "/items/Section/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single Section item by unique identifier.",
        "tags": ["Items", "ItemsSection"],
        "operationId": "readSingleItemsSection",
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Meta" },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ItemsSection"
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing Section item.",
        "tags": ["Items", "ItemsSection"],
        "operationId": "updateSingleItemsSection",
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Meta" },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemsSection"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ItemsSection"
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing Section item.",
        "tags": ["Items", "ItemsSection"],
        "operationId": "deleteSingleItemsSection",
        "responses": {
          "200": { "description": "Successful request" },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/SectionTranslation": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new SectionTranslation item.",
        "tags": ["Items", "ItemsSectionTranslation"],
        "operationId": "createItemsSectionTranslation",
        "parameters": [{ "$ref": "#/components/parameters/Meta" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsSectionTranslation"
                    }
                  },
                  { "$ref": "#/components/schemas/ItemsSectionTranslation" }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsSectionTranslation"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the SectionTranslation items.",
        "tags": ["Items", "ItemsSectionTranslation"],
        "operationId": "readItemsSectionTranslation",
        "security": [{ "Auth": [] }],
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Limit" },
          { "$ref": "#/components/parameters/Meta" },
          { "$ref": "#/components/parameters/Offset" },
          { "$ref": "#/components/parameters/Sort" },
          { "$ref": "#/components/parameters/Filter" },
          { "$ref": "#/components/parameters/Search" }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsSectionTranslation"
                      }
                    },
                    "meta": { "$ref": "#/components/schemas/x-metadata" }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      }
    },
    "/items/SectionTranslation/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single SectionTranslation item by unique identifier.",
        "tags": ["Items", "ItemsSectionTranslation"],
        "operationId": "readSingleItemsSectionTranslation",
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Meta" },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ItemsSectionTranslation"
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing SectionTranslation item.",
        "tags": ["Items", "ItemsSectionTranslation"],
        "operationId": "updateSingleItemsSectionTranslation",
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Meta" },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemsSectionTranslation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ItemsSectionTranslation"
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing SectionTranslation item.",
        "tags": ["Items", "ItemsSectionTranslation"],
        "operationId": "deleteSingleItemsSectionTranslation",
        "responses": {
          "200": { "description": "Successful request" },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/Version": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new Version item.",
        "tags": ["Items", "ItemsVersion"],
        "operationId": "createItemsVersion",
        "parameters": [{ "$ref": "#/components/parameters/Meta" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "oneOf": [
                  {
                    "type": "array",
                    "items": { "$ref": "#/components/schemas/ItemsVersion" }
                  },
                  { "$ref": "#/components/schemas/ItemsVersion" }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": { "$ref": "#/components/schemas/ItemsVersion" }
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the Version items.",
        "tags": ["Items", "ItemsVersion"],
        "operationId": "readItemsVersion",
        "security": [{ "Auth": [] }],
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Limit" },
          { "$ref": "#/components/parameters/Meta" },
          { "$ref": "#/components/parameters/Offset" },
          { "$ref": "#/components/parameters/Sort" },
          { "$ref": "#/components/parameters/Filter" },
          { "$ref": "#/components/parameters/Search" }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsVersion"
                      }
                    },
                    "meta": { "$ref": "#/components/schemas/x-metadata" }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      }
    },
    "/items/Version/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single Version item by unique identifier.",
        "tags": ["Items", "ItemsVersion"],
        "operationId": "readSingleItemsVersion",
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Meta" },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ItemsVersion"
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing Version item.",
        "tags": ["Items", "ItemsVersion"],
        "operationId": "deleteSingleItemsVersion",
        "responses": {
          "200": { "description": "Successful request" },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/VersionContentType": {
      "get": {
        "summary": "List Items",
        "description": "List the VersionContentType items.",
        "tags": ["Items", "ItemsVersionContentType"],
        "operationId": "readItemsVersionContentType",
        "security": [{ "Auth": [] }],
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Limit" },
          { "$ref": "#/components/parameters/Meta" },
          { "$ref": "#/components/parameters/Offset" },
          { "$ref": "#/components/parameters/Sort" },
          { "$ref": "#/components/parameters/Filter" },
          { "$ref": "#/components/parameters/Search" }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsVersionContentType"
                      }
                    },
                    "meta": { "$ref": "#/components/schemas/x-metadata" }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      }
    },
    "/items/VersionContentType/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single VersionContentType item by unique identifier.",
        "tags": ["Items", "ItemsVersionContentType"],
        "operationId": "readSingleItemsVersionContentType",
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Meta" },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ItemsVersionContentType"
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      }
    },
    "/collections": {
      "get": {
        "summary": "List Collections",
        "description": "Returns a list of the collections available in the project.",
        "operationId": "getCollections",
        "parameters": [
          { "$ref": "#/components/parameters/Offset" },
          { "$ref": "#/components/parameters/Meta" }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/Collections" }
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        },
        "tags": ["Collections"]
      }
    },
    "/collections/{id}": {
      "get": {
        "summary": "Retrieve a Collection",
        "description": "Retrieves the details of a single collection.",
        "operationId": "getCollection",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier of the collection.",
            "schema": { "type": "string" }
          },
          { "$ref": "#/components/parameters/Meta" }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": { "$ref": "#/components/schemas/Collections" }
                  }
                }
              }
            },
            "description": "Successful request"
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        },
        "tags": ["Collections"]
      }
    },
    "/fields": {
      "get": {
        "summary": "List All Fields",
        "description": "Returns a list of the fields available in the project.",
        "operationId": "getFields",
        "parameters": [
          { "$ref": "#/components/parameters/Limit" },
          { "$ref": "#/components/parameters/Sort" }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/Fields" }
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        },
        "tags": ["Fields"]
      }
    },
    "/fields/{collection}": {
      "get": {
        "summary": "List Fields in Collection",
        "description": "Returns a list of the fields available in the given collection.",
        "operationId": "getCollectionFields",
        "parameters": [
          {
            "description": "Unique identifier of the collection the item resides in.",
            "in": "path",
            "name": "collection",
            "required": true,
            "schema": { "type": "string" }
          },
          { "$ref": "#/components/parameters/Sort" }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/Fields" }
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        },
        "tags": ["Fields"]
      }
    },
    "/fields/{collection}/{id}": {
      "get": {
        "summary": "Retrieve a Field",
        "description": "Retrieves the details of a single field in a given collection.",
        "operationId": "getCollectionField",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": { "$ref": "#/components/schemas/Fields" }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        },
        "tags": ["Fields"],
        "parameters": [
          {
            "name": "collection",
            "in": "path",
            "description": "Unique identifier of the collection the item resides in.",
            "schema": { "type": "string" },
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of the field.",
            "schema": { "type": "string" },
            "required": true
          }
        ]
      }
    },
    "/files": {
      "get": {
        "summary": "List Files",
        "description": "List the files.",
        "tags": ["Files"],
        "operationId": "getFiles",
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Limit" },
          { "$ref": "#/components/parameters/Offset" },
          { "$ref": "#/components/parameters/Sort" },
          { "$ref": "#/components/parameters/Filter" },
          { "$ref": "#/components/parameters/Search" },
          { "$ref": "#/components/parameters/Meta" }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/Files" }
                    },
                    "meta": { "$ref": "#/components/schemas/x-metadata" }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      }
    },
    "/files/{id}": {
      "get": {
        "summary": "Retrieve a Files",
        "description": "Retrieve a single file by unique identifier.",
        "tags": ["Files"],
        "operationId": "getFile",
        "parameters": [
          { "$ref": "#/components/parameters/UUId" },
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Meta" }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": { "$ref": "#/components/schemas/Files" }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      }
    },
    "/folders": {
      "get": {
        "summary": "List Folders",
        "description": "List the folders.",
        "operationId": "getFolders",
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Limit" },
          { "$ref": "#/components/parameters/Offset" },
          { "$ref": "#/components/parameters/Sort" },
          { "$ref": "#/components/parameters/Filter" },
          { "$ref": "#/components/parameters/Search" },
          { "$ref": "#/components/parameters/Meta" }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/Folders" }
                    },
                    "meta": { "$ref": "#/components/schemas/x-metadata" }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        },
        "tags": ["Folders"]
      }
    },
    "/folders/{id}": {
      "get": {
        "summary": "Retrieve a Folder",
        "description": "Retrieve a single folder by unique identifier.",
        "operationId": "getFolder",
        "parameters": [
          { "$ref": "#/components/parameters/UUId" },
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Meta" }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": { "$ref": "#/components/schemas/Folders" }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        },
        "tags": ["Folders"]
      }
    },
    "/relations": {
      "get": {
        "summary": "List Relations",
        "description": "List the relations.",
        "operationId": "getRelations",
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Limit" },
          { "$ref": "#/components/parameters/Offset" },
          { "$ref": "#/components/parameters/Meta" },
          { "$ref": "#/components/parameters/Sort" },
          { "$ref": "#/components/parameters/Filter" },
          { "$ref": "#/components/parameters/Search" },
          { "$ref": "#/components/parameters/Page" }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/Relations" }
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        },
        "tags": ["Relations"]
      }
    },
    "/relations/{id}": {
      "get": {
        "summary": "Retrieve a Relation",
        "description": "Retrieve a single relation by unique identifier.",
        "operationId": "getRelation",
        "parameters": [
          { "$ref": "#/components/parameters/Id" },
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Meta" }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": { "$ref": "#/components/schemas/Relations" }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        },
        "tags": ["Relations"]
      }
    },
    "/roles": {
      "get": {
        "summary": "List Roles",
        "description": "List the roles.",
        "operationId": "getRoles",
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Limit" },
          { "$ref": "#/components/parameters/Offset" },
          { "$ref": "#/components/parameters/Meta" },
          { "$ref": "#/components/parameters/Sort" },
          { "$ref": "#/components/parameters/Filter" },
          { "$ref": "#/components/parameters/Search" },
          { "$ref": "#/components/parameters/Page" }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/Roles" }
                    },
                    "meta": { "$ref": "#/components/schemas/x-metadata" }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        },
        "tags": ["Roles"]
      }
    },
    "/roles/{id}": {
      "get": {
        "summary": "Retrieve a Role",
        "description": "Retrieve a single role by unique identifier.",
        "operationId": "getRole",
        "parameters": [
          { "$ref": "#/components/parameters/UUId" },
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Meta" }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": { "$ref": "#/components/schemas/Roles" }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        },
        "tags": ["Roles"]
      }
    },
    "/users": {
      "get": {
        "summary": "List Users",
        "description": "List the users.",
        "operationId": "getUsers",
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Limit" },
          { "$ref": "#/components/parameters/Offset" },
          { "$ref": "#/components/parameters/Meta" },
          { "$ref": "#/components/parameters/Sort" },
          { "$ref": "#/components/parameters/Filter" },
          { "$ref": "#/components/parameters/Search" }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/Users" }
                    },
                    "meta": { "$ref": "#/components/schemas/x-metadata" }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        },
        "tags": ["Users"]
      }
    },
    "/users/{id}": {
      "get": {
        "summary": "Retrieve a User",
        "description": "Retrieve a single user by unique identifier.",
        "operationId": "getUser",
        "parameters": [
          { "$ref": "#/components/parameters/UUId" },
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Meta" }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": { "$ref": "#/components/schemas/Users" }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        },
        "tags": ["Users"]
      }
    },
    "/users/invite": {},
    "/users/invite/accept": {},
    "/users/me": {
      "get": {
        "summary": "Retrieve Current User",
        "description": "Retrieve the currently authenticated user.",
        "operationId": "getMe",
        "parameters": [
          { "$ref": "#/components/parameters/Fields" },
          { "$ref": "#/components/parameters/Meta" }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": { "$ref": "#/components/schemas/Users" }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        },
        "tags": ["Users"]
      }
    },
    "/users/me/track/page": {},
    "/users/me/tfa/enable": {},
    "/users/me/tfa/disable": {}
  },
  "components": {
    "schemas": {
      "ItemsAnswerOption": {
        "type": "object",
        "properties": {
          "id": { "nullable": false, "type": "string", "format": "uuid" },
          "status": { "nullable": true, "type": "string" },
          "userCreated": {
            "nullable": true,
            "oneOf": [
              { "type": "string", "format": "uuid" },
              { "$ref": "#/components/schemas/Users" }
            ]
          },
          "dateCreated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "userUpdated": {
            "nullable": true,
            "oneOf": [
              { "type": "string", "format": "uuid" },
              { "$ref": "#/components/schemas/Users" }
            ]
          },
          "dateUpdated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "description": {
            "nullable": false,
            "description": "Field to recognise an answer option in directus UI",
            "type": "string"
          },
          "firstValueOperator": {
            "nullable": true,
            "oneOf": [
              { "type": "string" },
              { "$ref": "#/components/schemas/ItemsOperator" }
            ]
          },
          "firstValue": {
            "nullable": true,
            "type": "number",
            "format": "float"
          },
          "secondValueOperator": {
            "nullable": true,
            "oneOf": [
              { "type": "string" },
              { "$ref": "#/components/schemas/ItemsOperator" }
            ]
          },
          "secondValue": {
            "nullable": true,
            "type": "number",
            "format": "float"
          },
          "oldAnswerSetOptionId": { "nullable": true, "type": "integer" },
          "oldAnswerSetId": { "nullable": true, "type": "integer" },
          "question": {
            "nullable": false,
            "oneOf": [
              { "type": "string", "format": "uuid" },
              { "$ref": "#/components/schemas/ItemsQuestion" }
            ]
          },
          "fact": {
            "nullable": true,
            "oneOf": [
              { "type": "string" },
              { "$ref": "#/components/schemas/ItemsFact" }
            ]
          },
          "order": { "nullable": false, "type": "integer" },
          "translations": {
            "type": "array",
            "items": {
              "oneOf": [
                { "type": "string", "format": "uuid" },
                { "$ref": "#/components/schemas/ItemsAnswerOptionTranslation" }
              ]
            }
          }
        },
        "x-collection": "AnswerOption"
      },
      "ItemsAnswerOptionTranslation": {
        "type": "object",
        "properties": {
          "id": { "nullable": false, "type": "string", "format": "uuid" },
          "answerOptionId": {
            "nullable": true,
            "oneOf": [
              { "type": "string", "format": "uuid" },
              { "$ref": "#/components/schemas/ItemsAnswerOption" }
            ]
          },
          "languageId": {
            "nullable": true,
            "oneOf": [
              { "type": "integer" },
              { "$ref": "#/components/schemas/ItemsLanguage" }
            ]
          },
          "label": {
            "nullable": true,
            "description": "Text that is used to show an answer for multiple choice questions",
            "type": "string"
          },
          "additionalInformation": {
            "nullable": true,
            "description": "Additional information that is part of the answer option, which allows formatting",
            "type": "string"
          }
        },
        "x-collection": "AnswerOptionTranslation"
      },
      "ItemsArticle": {
        "type": "object",
        "properties": {
          "id": { "nullable": false, "type": "string", "format": "uuid" },
          "status": { "nullable": true, "type": "string" },
          "userCreated": {
            "nullable": true,
            "oneOf": [
              { "type": "string", "format": "uuid" },
              { "$ref": "#/components/schemas/Users" }
            ]
          },
          "dateCreated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "userUpdated": {
            "nullable": true,
            "oneOf": [
              { "type": "string", "format": "uuid" },
              { "$ref": "#/components/schemas/Users" }
            ]
          },
          "dateUpdated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "description": {
            "nullable": false,
            "description": "value mainly to better recognise article in directus UI",
            "type": "string"
          },
          "key": {
            "nullable": true,
            "description": "User defined value to identify article across environments",
            "type": "string"
          },
          "oldArticleId": { "nullable": true, "type": "integer" },
          "articleCategory": {
            "nullable": true,
            "oneOf": [
              { "type": "string", "format": "uuid" },
              { "$ref": "#/components/schemas/ItemsArticleCategory" }
            ]
          },
          "translations": {
            "type": "array",
            "items": {
              "oneOf": [
                { "type": "string", "format": "uuid" },
                { "$ref": "#/components/schemas/ItemsArticleTranslation" }
              ]
            }
          }
        },
        "x-collection": "Article"
      },
      "ItemsArticleCategory": {
        "type": "object",
        "properties": {
          "id": { "nullable": false, "type": "string", "format": "uuid" },
          "status": { "nullable": true, "type": "string" },
          "userCreated": {
            "nullable": true,
            "oneOf": [
              { "type": "string", "format": "uuid" },
              { "$ref": "#/components/schemas/Users" }
            ]
          },
          "dateCreated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "userUpdated": {
            "nullable": true,
            "oneOf": [
              { "type": "string", "format": "uuid" },
              { "$ref": "#/components/schemas/Users" }
            ]
          },
          "dateUpdated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "name": { "nullable": true, "type": "string" },
          "oldArticleCategoryId": { "nullable": true, "type": "integer" }
        },
        "x-collection": "ArticleCategory"
      },
      "ItemsArticleTranslation": {
        "type": "object",
        "properties": {
          "id": { "nullable": false, "type": "string", "format": "uuid" },
          "articleId": {
            "nullable": true,
            "oneOf": [
              { "type": "string", "format": "uuid" },
              { "$ref": "#/components/schemas/ItemsArticle" }
            ]
          },
          "languageId": {
            "nullable": true,
            "oneOf": [
              { "type": "integer" },
              { "$ref": "#/components/schemas/ItemsLanguage" }
            ]
          },
          "title": { "nullable": false, "type": "string" },
          "text": { "nullable": true, "type": "string" },
          "topTags": {
            "nullable": true,
            "type": "array",
            "items": { "type": "string" }
          },
          "tags": {
            "nullable": true,
            "type": "array",
            "items": { "type": "string" }
          },
          "oldArticleTranslationId": { "nullable": true, "type": "integer" }
        },
        "x-collection": "ArticleTranslation"
      },
      "ItemsCondition": {
        "type": "object",
        "properties": {
          "id": { "nullable": false, "type": "string", "format": "uuid" },
          "status": { "nullable": true, "type": "string" },
          "userCreated": {
            "nullable": true,
            "oneOf": [
              { "type": "string", "format": "uuid" },
              { "$ref": "#/components/schemas/Users" }
            ]
          },
          "dateCreated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "userUpdated": {
            "nullable": true,
            "oneOf": [
              { "type": "string", "format": "uuid" },
              { "$ref": "#/components/schemas/Users" }
            ]
          },
          "dateUpdated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "description": { "nullable": true, "type": "string" },
          "question": {
            "nullable": true,
            "oneOf": [
              { "type": "string", "format": "uuid" },
              { "$ref": "#/components/schemas/ItemsQuestion" }
            ]
          },
          "facts": {
            "type": "array",
            "items": {
              "oneOf": [
                { "type": "string", "format": "uuid" },
                { "$ref": "#/components/schemas/ItemsConditionFact" }
              ]
            }
          }
        },
        "x-collection": "Condition"
      },
      "ItemsConditionFact": {
        "type": "object",
        "properties": {
          "id": { "nullable": false, "type": "string", "format": "uuid" },
          "fact": {
            "nullable": false,
            "oneOf": [
              { "type": "string" },
              { "$ref": "#/components/schemas/ItemsFact" }
            ]
          },
          "condition": {
            "nullable": false,
            "oneOf": [
              { "type": "string", "format": "uuid" },
              { "$ref": "#/components/schemas/ItemsCondition" }
            ]
          }
        },
        "x-collection": "ConditionFact"
      },
      "ItemsFact": {
        "type": "object",
        "properties": {
          "fact": {
            "nullable": false,
            "description": "Primary key string set by user to define a fact",
            "type": "string"
          },
          "status": { "nullable": true, "type": "string" },
          "userCreated": {
            "nullable": true,
            "oneOf": [
              { "type": "string", "format": "uuid" },
              { "$ref": "#/components/schemas/Users" }
            ]
          },
          "dateCreated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "userUpdated": {
            "nullable": true,
            "oneOf": [
              { "type": "string", "format": "uuid" },
              { "$ref": "#/components/schemas/Users" }
            ]
          },
          "dateUpdated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "description": {
            "nullable": true,
            "description": "Value that gives more explanation on the fact",
            "type": "string"
          },
          "oldFactId": { "nullable": true, "type": "integer" }
        },
        "x-collection": "Fact"
      },
      "ItemsLanguage": {
        "type": "object",
        "properties": {
          "id": { "nullable": false, "type": "integer" },
          "code": { "nullable": false, "type": "string" },
          "description": { "nullable": false, "type": "string" }
        },
        "x-collection": "Language"
      },
      "ItemsMeaning": {
        "type": "object",
        "properties": { "meaning": { "nullable": false, "type": "string" } },
        "x-collection": "Meaning"
      },
      "ItemsOperator": {
        "type": "object",
        "properties": { "operator": { "nullable": false, "type": "string" } },
        "x-collection": "Operator"
      },
      "ItemsQuestion": {
        "type": "object",
        "properties": {
          "id": { "nullable": false, "type": "string", "format": "uuid" },
          "status": { "nullable": true, "type": "string" },
          "userCreated": {
            "nullable": true,
            "oneOf": [
              { "type": "string", "format": "uuid" },
              { "$ref": "#/components/schemas/Users" }
            ]
          },
          "dateCreated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "userUpdated": {
            "nullable": true,
            "oneOf": [
              { "type": "string", "format": "uuid" },
              { "$ref": "#/components/schemas/Users" }
            ]
          },
          "dateUpdated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "description": {
            "nullable": false,
            "description": "Value to recognise question mainly within directus UI",
            "type": "string"
          },
          "order": { "nullable": false, "type": "integer" },
          "min": {
            "nullable": true,
            "description": "Question constraint depend on use case (e.g. minimals answers in multiple choice)",
            "type": "number"
          },
          "max": {
            "nullable": true,
            "description": "Question constraint depend on use case (e.g. maximal answers in multiple choice)",
            "type": "number"
          },
          "key": {
            "nullable": true,
            "description": "User defined value to identify question across environments",
            "type": "string"
          },
          "oldQuestionId": { "nullable": true, "type": "integer" },
          "type": {
            "nullable": false,
            "description": "Value to define sort of question, also has influence on the logic of treating a question.",
            "oneOf": [
              { "type": "string" },
              { "$ref": "#/components/schemas/ItemsQuestiontype" }
            ]
          },
          "display": {
            "nullable": true,
            "description": "Value to be used in frontend applications how to show the question.",
            "oneOf": [
              { "type": "string" },
              { "$ref": "#/components/schemas/ItemsQuestiondisplay" }
            ]
          },
          "meaning": {
            "nullable": true,
            "description": "Value to identify question for specialist care questionnaire reporting",
            "oneOf": [
              { "type": "string" },
              { "$ref": "#/components/schemas/ItemsMeaning" }
            ]
          },
          "section": {
            "nullable": true,
            "oneOf": [
              { "type": "string", "format": "uuid" },
              { "$ref": "#/components/schemas/ItemsSection" }
            ]
          },
          "translations": {
            "description": "Translatable fields of question to show question in a questionnaire",
            "type": "array",
            "items": {
              "oneOf": [
                { "type": "string", "format": "uuid" },
                { "$ref": "#/components/schemas/ItemsQuestionTranslation" }
              ]
            }
          },
          "answerOptions": {
            "description": "Field referencing an answer option for the question",
            "type": "array",
            "items": {
              "oneOf": [
                { "type": "string", "format": "uuid" },
                { "$ref": "#/components/schemas/ItemsAnswerOption" }
              ]
            }
          },
          "conditions": {
            "description": "One of the conditions have to be full-filled that it is valid to ask this question in a questionnaire. A condition is a combination of facts. ",
            "type": "array",
            "items": {
              "oneOf": [
                { "type": "string", "format": "uuid" },
                { "$ref": "#/components/schemas/ItemsCondition" }
              ]
            }
          }
        },
        "x-collection": "Question"
      },
      "ItemsQuestiondisplay": {
        "type": "object",
        "properties": { "display": { "nullable": false, "type": "string" } },
        "x-collection": "Questiondisplay"
      },
      "ItemsQuestionnaire": {
        "type": "object",
        "properties": {
          "id": { "nullable": false, "type": "string", "format": "uuid" },
          "status": { "nullable": true, "type": "string" },
          "userCreated": {
            "nullable": true,
            "oneOf": [
              { "type": "string", "format": "uuid" },
              { "$ref": "#/components/schemas/Users" }
            ]
          },
          "dateCreated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "userUpdated": {
            "nullable": true,
            "oneOf": [
              { "type": "string", "format": "uuid" },
              { "$ref": "#/components/schemas/Users" }
            ]
          },
          "dateUpdated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "description": {
            "nullable": false,
            "description": "Value to recognise questionnaire mostly within directus UI",
            "type": "string"
          },
          "key": {
            "nullable": true,
            "description": "User defined value to identify questionnaire across environments",
            "type": "string"
          },
          "oldQuestionSetId": { "nullable": true, "type": "integer" },
          "sections": {
            "description": "Sections that belong to this questionnaire. Sections contain questions.",
            "type": "array",
            "items": {
              "oneOf": [
                { "type": "string", "format": "uuid" },
                { "$ref": "#/components/schemas/ItemsSection" }
              ]
            }
          },
          "translations": {
            "description": "Translatable fields that are used to display actual content",
            "type": "array",
            "items": {
              "oneOf": [
                { "type": "string", "format": "uuid" },
                { "$ref": "#/components/schemas/ItemsQuestionnaireTranslation" }
              ]
            }
          }
        },
        "x-collection": "Questionnaire"
      },
      "ItemsQuestionnaireTranslation": {
        "type": "object",
        "properties": {
          "id": { "nullable": false, "type": "string", "format": "uuid" },
          "questionnaireId": {
            "nullable": true,
            "oneOf": [
              { "type": "string", "format": "uuid" },
              { "$ref": "#/components/schemas/ItemsQuestionnaire" }
            ]
          },
          "languageId": {
            "nullable": true,
            "oneOf": [
              { "type": "integer" },
              { "$ref": "#/components/schemas/ItemsLanguage" }
            ]
          },
          "label": { "nullable": false, "type": "string" },
          "isEnabled": {
            "nullable": false,
            "description": "This indicates whether the content for the given language is complete and available",
            "type": "boolean"
          }
        },
        "x-collection": "QuestionnaireTranslation"
      },
      "ItemsQuestionTranslation": {
        "type": "object",
        "properties": {
          "id": { "nullable": false, "type": "string", "format": "uuid" },
          "questionId": {
            "nullable": true,
            "oneOf": [
              { "type": "string", "format": "uuid" },
              { "$ref": "#/components/schemas/ItemsQuestion" }
            ]
          },
          "languageId": {
            "nullable": true,
            "oneOf": [
              { "type": "integer" },
              { "$ref": "#/components/schemas/ItemsLanguage" }
            ]
          },
          "text": {
            "nullable": false,
            "description": "The actual question shown to the ones hoe answers a questionnaire.",
            "type": "string"
          },
          "additionalInformation": { "nullable": true, "type": "string" },
          "isEnabled": {
            "nullable": false,
            "description": "This indicates whether the content for the given language is complete and available",
            "type": "boolean"
          }
        },
        "x-collection": "QuestionTranslation"
      },
      "ItemsQuestiontype": {
        "type": "object",
        "properties": {
          "type": { "nullable": false, "type": "string" },
          "oldQuestionTypeId": { "nullable": true, "type": "integer" }
        },
        "x-collection": "Questiontype"
      },
      "ItemsSection": {
        "type": "object",
        "properties": {
          "id": { "nullable": false, "type": "string", "format": "uuid" },
          "status": { "nullable": true, "type": "string" },
          "userCreated": {
            "nullable": true,
            "oneOf": [
              { "type": "string", "format": "uuid" },
              { "$ref": "#/components/schemas/Users" }
            ]
          },
          "dateCreated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "userUpdated": {
            "nullable": true,
            "oneOf": [
              { "type": "string", "format": "uuid" },
              { "$ref": "#/components/schemas/Users" }
            ]
          },
          "dateUpdated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "description": {
            "nullable": false,
            "description": "Value mainly to better identify the section in directus UI",
            "type": "string"
          },
          "order": { "nullable": false, "type": "integer" },
          "oldQuestionSectionId": { "nullable": true, "type": "integer" },
          "questionnaire": {
            "nullable": true,
            "oneOf": [
              { "type": "string", "format": "uuid" },
              { "$ref": "#/components/schemas/ItemsQuestionnaire" }
            ]
          },
          "translations": {
            "type": "array",
            "items": {
              "oneOf": [
                { "type": "string", "format": "uuid" },
                { "$ref": "#/components/schemas/ItemsSectionTranslation" }
              ]
            }
          },
          "questions": {
            "type": "array",
            "items": {
              "oneOf": [
                { "type": "string", "format": "uuid" },
                { "$ref": "#/components/schemas/ItemsQuestion" }
              ]
            }
          }
        },
        "x-collection": "Section"
      },
      "ItemsSectionTranslation": {
        "type": "object",
        "properties": {
          "id": { "nullable": false, "type": "string", "format": "uuid" },
          "sectionId": {
            "nullable": true,
            "oneOf": [
              { "type": "string", "format": "uuid" },
              { "$ref": "#/components/schemas/ItemsSection" }
            ]
          },
          "languageId": {
            "nullable": true,
            "oneOf": [
              { "type": "integer" },
              { "$ref": "#/components/schemas/ItemsLanguage" }
            ]
          },
          "title": { "nullable": false, "type": "string" }
        },
        "x-collection": "SectionTranslation"
      },
      "ItemsVersion": {
        "type": "object",
        "properties": {
          "id": { "nullable": false, "type": "string", "format": "uuid" },
          "key": { "nullable": false, "type": "string" },
          "type": {
            "nullable": false,
            "oneOf": [
              { "type": "string" },
              { "$ref": "#/components/schemas/ItemsVersionContentType" }
            ]
          },
          "snapshot": {
            "nullable": false,
            "type": "array",
            "items": { "type": "string" }
          },
          "dateCreated": {
            "nullable": false,
            "type": "string",
            "format": "date-time"
          },
          "number": { "nullable": false, "type": "integer" }
        },
        "x-collection": "Version"
      },
      "ItemsVersionContentType": {
        "type": "object",
        "properties": { "type": { "nullable": false, "type": "string" } },
        "x-collection": "VersionContentType"
      },
      "x-metadata": {
        "type": "object",
        "properties": {
          "total_count": {
            "description": "Returns the total item count of the collection you're querying.",
            "type": "integer"
          },
          "filter_count": {
            "description": "Returns the item count of the collection you're querying, taking the current filter/search parameters into account.",
            "type": "integer"
          }
        }
      },
      "Query": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Control what fields are being returned in the object.",
            "example": ["*", "*.*"]
          },
          "filter": { "type": "object", "example": { "": { "": "" } } },
          "search": {
            "description": "Filter by items that contain the given search query in one of their fields.",
            "type": "string"
          },
          "sort": {
            "type": "array",
            "items": { "type": "string" },
            "description": "How to sort the returned items.",
            "example": ["-date_created"]
          },
          "limit": {
            "type": "number",
            "description": "Set the maximum number of items that will be returned"
          },
          "offset": {
            "type": "number",
            "description": "How many items to skip when fetching data."
          },
          "page": {
            "type": "number",
            "description": "Cursor for use in pagination. Often used in combination with limit."
          },
          "deep": {
            "type": "object",
            "description": "Deep allows you to set any of the other query parameters on a nested relational dataset.",
            "example": { "related_articles": { "_limit": 3 } }
          }
        }
      },
      "Collections": {
        "type": "object",
        "x-collection": "directus_collections",
        "properties": {
          "collection": {
            "description": "The collection key.",
            "example": "customers",
            "type": "string"
          },
          "icon": { "nullable": true, "type": "string" },
          "note": { "nullable": true, "type": "string" },
          "display_template": { "nullable": true, "type": "string" },
          "hidden": { "nullable": false, "type": "boolean" },
          "singleton": { "nullable": false, "type": "boolean" },
          "translations": {
            "nullable": true,
            "type": "array",
            "items": { "type": "string" }
          },
          "archive_field": { "nullable": true, "type": "string" },
          "archive_app_filter": { "nullable": false, "type": "boolean" },
          "archive_value": { "nullable": true, "type": "string" },
          "unarchive_value": { "nullable": true, "type": "string" },
          "sort_field": { "nullable": true, "type": "string" },
          "accountability": { "nullable": true, "type": "string" },
          "color": { "nullable": true, "type": "string" },
          "item_duplication_fields": {
            "nullable": true,
            "type": "array",
            "items": { "type": "string" }
          },
          "sort": { "nullable": true, "type": "integer" },
          "group": {
            "nullable": true,
            "oneOf": [
              { "type": "string" },
              { "$ref": "#/components/schemas/Collections" }
            ]
          },
          "collapse": { "nullable": false, "type": "string" },
          "collection_divider": { "type": "string" },
          "archive_divider": { "type": "string" },
          "sort_divider": { "type": "string" },
          "accountability_divider": { "type": "string" },
          "duplication_divider": { "type": "string" }
        }
      },
      "Fields": {
        "type": "object",
        "x-collection": "directus_fields",
        "properties": {
          "id": { "nullable": false, "type": "integer" },
          "collection": {
            "description": "Unique name of the collection this field is in.",
            "example": "about_us",
            "type": "string"
          },
          "field": {
            "description": "Unique name of the field. Field name is unique within the collection.",
            "example": "id",
            "type": "string"
          },
          "special": {
            "nullable": true,
            "type": "array",
            "items": { "type": "string" }
          },
          "interface": { "nullable": true, "type": "string" },
          "options": {
            "nullable": true,
            "type": "array",
            "items": { "type": "string" }
          },
          "display": { "nullable": true, "type": "string" },
          "display_options": {
            "nullable": true,
            "type": "array",
            "items": { "type": "string" }
          },
          "readonly": { "nullable": false, "type": "boolean" },
          "hidden": { "nullable": false, "type": "boolean" },
          "sort": { "nullable": true, "type": "integer" },
          "width": { "nullable": true, "type": "string" },
          "translations": {
            "nullable": true,
            "type": "array",
            "items": { "type": "string" }
          },
          "note": { "nullable": true, "type": "string" },
          "conditions": {
            "nullable": true,
            "type": "array",
            "items": { "type": "string" }
          },
          "required": { "nullable": true, "type": "boolean" },
          "group": {
            "nullable": true,
            "oneOf": [
              { "type": "integer" },
              { "$ref": "#/components/schemas/Fields" }
            ]
          },
          "validation": {
            "nullable": true,
            "type": "array",
            "items": { "type": "string" }
          },
          "validation_message": { "nullable": true, "type": "string" }
        }
      },
      "Files": {
        "type": "object",
        "x-collection": "directus_files",
        "properties": {
          "id": {
            "description": "Unique identifier for the file.",
            "example": "8cbb43fe-4cdf-4991-8352-c461779cec02",
            "type": "string"
          },
          "storage": {
            "description": "Where the file is stored. Either `local` for the local filesystem or the name of the storage adapter (for example `s3`).",
            "example": "local",
            "type": "string"
          },
          "filename_disk": {
            "description": "Name of the file on disk. By default, Directus uses a random hash for the filename.",
            "example": "a88c3b72-ac58-5436-a4ec-b2858531333a.jpg",
            "type": "string"
          },
          "filename_download": {
            "description": "How you want to the file to be named when it's being downloaded.",
            "example": "avatar.jpg",
            "type": "string"
          },
          "title": {
            "description": "Title for the file. Is extracted from the filename on upload, but can be edited by the user.",
            "example": "User Avatar",
            "type": "string"
          },
          "type": {
            "description": "MIME type of the file.",
            "example": "image/jpeg",
            "type": "string"
          },
          "folder": {
            "description": "Virtual folder where this file resides in.",
            "example": null,
            "oneOf": [
              { "type": "string" },
              { "$ref": "#/components/schemas/Folders" }
            ],
            "nullable": true
          },
          "uploaded_by": {
            "description": "Who uploaded the file.",
            "example": "63716273-0f29-4648-8a2a-2af2948f6f78",
            "oneOf": [
              { "type": "string" },
              { "$ref": "#/components/schemas/Users" }
            ]
          },
          "uploaded_on": {
            "description": "When the file was uploaded.",
            "example": "2019-12-03T00:10:15+00:00",
            "type": "string",
            "format": "date-time"
          },
          "modified_by": {
            "nullable": true,
            "oneOf": [
              { "type": "string", "format": "uuid" },
              { "$ref": "#/components/schemas/Users" }
            ]
          },
          "modified_on": {
            "nullable": false,
            "type": "string",
            "format": "timestamp"
          },
          "charset": {
            "description": "Character set of the file.",
            "example": "binary",
            "type": "string",
            "nullable": true
          },
          "filesize": {
            "description": "Size of the file in bytes.",
            "example": 137862,
            "type": "integer"
          },
          "width": {
            "description": "Width of the file in pixels. Only applies to images.",
            "example": 800,
            "type": "integer",
            "nullable": true
          },
          "height": {
            "description": "Height of the file in pixels. Only applies to images.",
            "example": 838,
            "type": "integer",
            "nullable": true
          },
          "duration": {
            "description": "Duration of the file in seconds. Only applies to audio and video.",
            "example": 0,
            "type": "integer",
            "nullable": true
          },
          "embed": {
            "description": "Where the file was embedded from.",
            "example": null,
            "type": "string",
            "nullable": true
          },
          "description": {
            "description": "Description for the file.",
            "type": "string",
            "nullable": true
          },
          "location": {
            "description": "Where the file was created. Is automatically populated based on EXIF data for images.",
            "type": "string",
            "nullable": true
          },
          "tags": {
            "description": "Tags for the file. Is automatically populated based on EXIF data for images.",
            "type": "array",
            "nullable": true,
            "items": { "type": "string" }
          },
          "metadata": {
            "description": "IPTC, EXIF, and ICC metadata extracted from file",
            "type": "object",
            "nullable": true
          },
          "storage_divider": { "type": "string" }
        }
      },
      "Folders": {
        "type": "object",
        "x-collection": "directus_files",
        "properties": {
          "id": {
            "description": "Unique identifier for the folder.",
            "example": "0cf0e03d-4364-45df-b77b-ca61f61869d2",
            "type": "string"
          },
          "name": {
            "description": "Name of the folder.",
            "example": "New York",
            "type": "string"
          },
          "parent": {
            "description": "Unique identifier of the parent folder. This allows for nested folders.",
            "example": null,
            "oneOf": [
              { "type": "string" },
              { "$ref": "#/components/schemas/Folders" }
            ],
            "nullable": true
          }
        }
      },
      "Relations": {
        "type": "object",
        "x-collection": "directus_relations",
        "properties": {
          "id": {
            "description": "Unique identifier for the relation.",
            "example": 1,
            "type": "integer"
          },
          "many_collection": {
            "description": "Collection that has the field that holds the foreign key.",
            "example": "directus_activity",
            "type": "string"
          },
          "many_field": {
            "description": "Foreign key. Field that holds the primary key of the related collection.",
            "example": "user",
            "type": "string"
          },
          "one_collection": {
            "description": "Collection on the _one_ side of the relationship.",
            "example": "directus_users",
            "type": "string"
          },
          "one_field": {
            "description": "Alias column that serves as the _one_ side of the relationship.",
            "example": null,
            "type": "string",
            "nullable": true
          },
          "one_collection_field": { "nullable": true, "type": "string" },
          "one_allowed_collections": {
            "nullable": true,
            "type": "array",
            "items": { "type": "string" }
          },
          "junction_field": {
            "description": "Field on the junction table that holds the many field of the related relation.",
            "example": null,
            "type": "string",
            "nullable": true
          },
          "sort_field": { "nullable": true, "type": "string" },
          "one_deselect_action": { "nullable": false, "type": "string" }
        }
      },
      "Roles": {
        "type": "object",
        "x-collection": "directus_roles",
        "properties": {
          "id": {
            "description": "Unique identifier for the role.",
            "example": "2f24211d-d928-469a-aea3-3c8f53d4e426",
            "type": "string"
          },
          "name": {
            "description": "Name of the role.",
            "example": "Administrator",
            "type": "string"
          },
          "icon": {
            "description": "The role's icon.",
            "example": "verified_user",
            "type": "string"
          },
          "description": {
            "description": "Description of the role.",
            "example": "Admins have access to all managed data within the system by default",
            "type": "string",
            "nullable": true
          },
          "ip_access": {
            "description": "Array of IP addresses that are allowed to connect to the API as a user of this role.",
            "example": [],
            "type": "array",
            "items": { "type": "string" }
          },
          "enforce_tfa": {
            "description": "Whether or not this role enforces the use of 2FA.",
            "example": false,
            "type": "boolean"
          },
          "admin_access": {
            "description": "Admin role. If true, skips all permission checks.",
            "example": false,
            "type": "boolean"
          },
          "app_access": {
            "description": "The users in the role are allowed to use the app.",
            "example": true,
            "type": "boolean"
          },
          "users": {
            "type": "array",
            "items": {
              "oneOf": [
                { "type": "string", "format": "uuid" },
                { "$ref": "#/components/schemas/Users" }
              ]
            }
          }
        }
      },
      "Users": {
        "type": "object",
        "x-collection": "directus_users",
        "properties": {
          "id": {
            "description": "Unique identifier for the user.",
            "example": "63716273-0f29-4648-8a2a-2af2948f6f78",
            "type": "string"
          },
          "first_name": {
            "description": "First name of the user.",
            "example": "Admin",
            "type": "string"
          },
          "last_name": {
            "description": "Last name of the user.",
            "example": "User",
            "type": "string"
          },
          "email": {
            "description": "Unique email address for the user.",
            "example": "admin@example.com",
            "type": "string",
            "format": "email"
          },
          "password": {
            "description": "Password of the user.",
            "type": "string"
          },
          "location": {
            "description": "The user's location.",
            "example": null,
            "type": "string",
            "nullable": true
          },
          "title": {
            "description": "The user's title.",
            "example": null,
            "type": "string",
            "nullable": true
          },
          "description": {
            "description": "The user's description.",
            "example": null,
            "type": "string",
            "nullable": true
          },
          "tags": {
            "description": "The user's tags.",
            "example": null,
            "type": "array",
            "nullable": true,
            "items": { "type": "string" }
          },
          "avatar": {
            "description": "The user's avatar.",
            "example": null,
            "oneOf": [
              { "type": "string" },
              { "$ref": "#/components/schemas/Files" }
            ],
            "nullable": true
          },
          "language": {
            "description": "The user's language used in Directus.",
            "example": "en-US",
            "type": "string"
          },
          "theme": {
            "description": "What theme the user is using.",
            "example": "auto",
            "type": "string",
            "enum": ["light", "dark", "auto"]
          },
          "tfa_secret": {
            "description": "The 2FA secret string that's used to generate one time passwords.",
            "example": null,
            "type": "string",
            "nullable": true
          },
          "status": {
            "description": "Status of the user.",
            "example": "active",
            "type": "string",
            "enum": ["active", "invited", "draft", "suspended", "deleted"]
          },
          "role": {
            "description": "Unique identifier of the role of this user.",
            "example": "2f24211d-d928-469a-aea3-3c8f53d4e426",
            "oneOf": [
              { "type": "string" },
              { "$ref": "#/components/schemas/Roles" }
            ]
          },
          "token": {
            "description": "Static token for the user.",
            "type": "string",
            "nullable": true
          },
          "last_access": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "last_page": {
            "description": "Last page that the user was on.",
            "example": "/my-project/settings/collections/a",
            "type": "string",
            "nullable": true
          },
          "provider": { "nullable": false, "type": "string" },
          "external_identifier": { "nullable": true, "type": "string" },
          "auth_data": {
            "nullable": true,
            "type": "array",
            "items": { "type": "string" }
          },
          "email_notifications": { "nullable": true, "type": "boolean" },
          "preferences_divider": { "type": "string" },
          "admin_divider": { "type": "string" }
        }
      }
    },
    "parameters": {
      "Id": {
        "description": "Index",
        "name": "id",
        "in": "path",
        "required": true,
        "schema": { "type": "integer" }
      },
      "UUId": {
        "description": "Unique identifier for the object.",
        "name": "id",
        "in": "path",
        "required": true,
        "schema": {
          "example": "8cbb43fe-4cdf-4991-8352-c461779cec02",
          "type": "string"
        }
      },
      "Collection": {
        "description": "Collection of which you want to retrieve the items from.",
        "name": "collection",
        "in": "path",
        "required": true,
        "schema": { "type": "string" }
      },
      "Search": {
        "description": "Filter by items that contain the given search query in one of their fields.",
        "in": "query",
        "name": "search",
        "required": false,
        "schema": { "type": "string" }
      },
      "Page": {
        "description": "Cursor for use in pagination. Often used in combination with limit.",
        "in": "query",
        "name": "page",
        "required": false,
        "schema": { "type": "integer" }
      },
      "Offset": {
        "description": "How many items to skip when fetching data.",
        "in": "query",
        "name": "offset",
        "required": false,
        "schema": { "type": "integer" }
      },
      "Sort": {
        "description": "How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.\n",
        "in": "query",
        "name": "sort",
        "required": false,
        "explode": false,
        "schema": { "type": "array", "items": { "type": "string" } }
      },
      "Meta": {
        "description": "What metadata to return in the response.",
        "in": "query",
        "name": "meta",
        "required": false,
        "schema": { "type": "string" }
      },
      "Limit": {
        "description": "A limit on the number of objects that are returned.",
        "in": "query",
        "name": "limit",
        "required": false,
        "schema": { "type": "integer" }
      },
      "Filter": {
        "description": "Select items in collection by given conditions.",
        "in": "query",
        "name": "filter",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^(\\[[^\\[\\]]*?\\]){1}(\\[(_eq|_neq|_lt|_lte|_gt|_gte|_in|_nin|_null|_nnull|_contains|_ncontains|_between|_nbetween|_empty|_nempty)\\])?=.*?$"
          }
        }
      },
      "Fields": {
        "description": "Control what fields are being returned in the object.",
        "in": "query",
        "name": "fields",
        "required": false,
        "explode": false,
        "schema": { "type": "array", "items": { "type": "string" } }
      },
      "Mode": {
        "description": "Controls if the API sets a cookie or returns a JWT on successful login.",
        "in": "query",
        "name": "mode",
        "required": true,
        "schema": { "type": "string", "enum": ["jwt", "cookie"] }
      }
    },
    "responses": {
      "NotFoundError": {
        "description": "Error: Not found.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer", "format": "int64" },
                    "message": { "type": "string" }
                  }
                }
              }
            }
          }
        }
      },
      "UnauthorizedError": {
        "description": "Error: Unauthorized request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer", "format": "int64" },
                    "message": { "type": "string" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "Auth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Authenticate by Facade API"
      }
    }
  },
  "security": [{ "Auth": [] }]
}
